import streamlit as st
from utils.openai_helper import get_openai_streaming_response
from utils.openai_helper import get_openai_response
from helper.crawl_selenium import get_product_info, extract_product_id, is_product_id_in_list, get_basic_product_info
import time

def main():
    st.set_page_config(layout="wide", page_title="Amazon Chatbot", page_icon="ü§ñ")

    # Sidebar
    st.sidebar.header("Chatbot Configuration")

    # 1) Ch·ªçn m√¥ h√¨nh
    selected_model = st.sidebar.selectbox(
        "Ch·ªçn Model",
        options=["gpt-4o-mini", "gpt-4.1-mini", "gpt-4.1"]
    )

    # 2) Nh·∫≠p URL c·ªßa s·∫£n ph·∫©m Amazon
    product_url = st.sidebar.text_input("Nh·∫≠p Amazon Product URL")

    # Kh·ªüi t·∫°o session state cho product data v√† product id
    if "product_data" not in st.session_state:
        st.session_state.product_data = None
    
    if "product_id" not in st.session_state:
        st.session_state.product_id = None
        
    if "use_file_search" not in st.session_state:
        st.session_state.use_file_search = False
    
    # Kh·ªüi t·∫°o session state ƒë·ªÉ theo d√µi URL hi·ªán t·∫°i v√† tr∆∞·ªõc ƒë√≥
    if "current_url" not in st.session_state:
        st.session_state.current_url = ""
    
    if "previous_url" not in st.session_state:
        st.session_state.previous_url = ""

    # Ki·ªÉm tra xem URL c√≥ thay ƒë·ªïi kh√¥ng
    if product_url != st.session_state.current_url:
        st.session_state.previous_url = st.session_state.current_url
        st.session_state.current_url = product_url
        
        # Reset system message khi URL thay ƒë·ªïi
        if "messages_history" in st.session_state:
            for i, msg in enumerate(st.session_state.messages_history):
                if msg.get("role") == "system":
                    st.session_state.messages_history[i] = {
                        "role": "system", 
                        "content": "B·∫°n l√† tr·ª£ l√Ω AI h·ªØu √≠ch, th√¢n thi·ªán v√† trung th·ª±c."
                    }
                    break
        
        # Reset conversation khi URL thay ƒë·ªïi v√† kh√¥ng r·ªóng
        if product_url and st.session_state.previous_url and product_url != st.session_state.previous_url:
            st.session_state.conversation = []


    # Khi URL thay ƒë·ªïi, ki·ªÉm tra product ID t·ª± ƒë·ªông
    if product_url:
        product_id = extract_product_id(product_url)
        if product_id:
            is_in_list = is_product_id_in_list(product_id)
            
            if is_in_list:
                st.sidebar.success(f"‚úÖ S·∫£n ph·∫©m c√≥ ID {product_id} ƒë√£ c√≥ trong c∆° s·ªü d·ªØ li·ªáu!")
                st.session_state.product_id = product_id
                st.session_state.use_file_search = True
            else:
                st.sidebar.info(f"üîç S·∫£n ph·∫©m c√≥ ID {product_id} kh√¥ng c√≥ trong c∆° s·ªü d·ªØ li·ªáu. S·∫Ω d√πng scraping.")
                st.session_state.product_id = None
                st.session_state.use_file_search = False
        else:
            st.sidebar.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ tr√≠ch xu·∫•t ID s·∫£n ph·∫©m t·ª´ URL. Vui l√≤ng ki·ªÉm tra l·∫°i URL.")

    # 4) N√∫t scrape
    if st.sidebar.button("Scrape"):
        # Ki·ªÉm tra URL tr∆∞·ªõc khi scrape
        if not product_url:
            st.sidebar.error("‚ö†Ô∏è Vui l√≤ng nh·∫≠p URL s·∫£n ph·∫©m tr∆∞·ªõc khi scrape.")
        else:
            # Reset ho√†n to√†n session state khi scrape s·∫£n ph·∫©m m·ªõi
            current_product_id = extract_product_id(product_url)
            if current_product_id != st.session_state.get("last_scraped_product_id", None):
                # Reset t·∫•t c·∫£ session state li√™n quan ƒë·∫øn s·∫£n ph·∫©m
                st.session_state.product_data = None
                st.session_state.product_id = None
                st.session_state.use_file_search = False
                st.session_state.product_summary = None
                st.session_state.conversation = []
                st.session_state.messages_history = [
                    {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω AI h·ªØu √≠ch, th√¢n thi·ªán v√† trung th·ª±c."}
                ]
                # Ghi nh·ªõ ID s·∫£n ph·∫©m hi·ªán t·∫°i ƒë·ªÉ so s√°nh sau n√†y
                st.session_state.last_scraped_product_id = current_product_id
            
            # Hi·ªÉn th·ªã loading spinner trung t√¢m m√†n h√¨nh
            with st.spinner("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu s·∫£n ph·∫©m..."):
                # Hi·ªÉn th·ªã progress bar ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn tr√¨nh scraping
                progress_bar = st.progress(0)
                
                # Th√¥ng b√°o ƒëang b·∫Øt ƒë·∫ßu qu√° tr√¨nh
                progress_status = st.empty()
                progress_status.info("ƒêang b·∫Øt ƒë·∫ßu qu√° tr√¨nh scraping...")
                
                # L·∫•y product ID v√† thi·∫øt l·∫≠p tr·∫°ng th√°i
                product_id = extract_product_id(product_url)
                use_file_search = is_product_id_in_list(product_id) if product_id else False
                st.session_state.product_id = product_id
                st.session_state.use_file_search = use_file_search
                
                # C·∫≠p nh·∫≠t progress bar
                progress_bar.progress(10)
                progress_status.info("ƒêang t√¨m ki·∫øm th√¥ng tin s·∫£n ph·∫©m...")
                
                # --- Lu√¥n scrape th√¥ng tin c∆° b·∫£n s·∫£n ph·∫©m b·∫•t k·ªÉ ƒë√£ c√≥ trong c∆° s·ªü d·ªØ li·ªáu hay ch∆∞a ---
                progress_status.info("ƒêang scrape th√¥ng tin c∆° b·∫£n cho s·∫£n ph·∫©m...")
                
                # Scrape th√¥ng tin c∆° b·∫£n t·ª´ URL
                basic_product_info = get_basic_product_info(product_url)
                
                # C·∫≠p nh·∫≠t progress bar
                progress_bar.progress(30)
                
                if use_file_search and product_id:
                    # N·∫øu s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i, l·∫•y reviews t·ª´ c∆° s·ªü d·ªØ li·ªáu
                    progress_status.info("ƒêang t√¨m ki·∫øm ƒë√°nh gi√° trong c∆° s·ªü d·ªØ li·ªáu...")
                    
                    # L·∫•y reviews t·ª´ c∆° s·ªü d·ªØ li·ªáu th√¥ng qua file search
                    reviews_prompt = f"Li·ªát k√™ chi ti·∫øt t·∫•t c·∫£ c√°c ƒë√°nh gi√° cho s·∫£n ph·∫©m c√≥ ProductId {product_id}. Cho m·ªói ƒë√°nh gi√°, bao g·ªìm: t√™n ng∆∞·ªùi d√πng, s·ªë sao ƒë√°nh gi√°, ti√™u ƒë·ªÅ ƒë√°nh gi√°, v√† n·ªôi dung ƒë√°nh gi√°."
                    reviews_context = get_openai_response(reviews_prompt, product_id, use_file_search=True, selected_model=selected_model)
                    
                    # ƒê·∫£m b·∫£o l∆∞u d·ªØ li·ªáu v√†o session state ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
                    st.session_state.product_data = {
                        "title": basic_product_info.get('title', 'Kh√¥ng r√µ'),
                        "price": basic_product_info.get('price', 'Kh√¥ng r√µ'),
                        "rating": basic_product_info.get('rating', 'Kh√¥ng r√µ'),
                        "review_count": basic_product_info.get('review_count', 'Kh√¥ng r√µ'),
                        "description": basic_product_info.get('description', 'Kh√¥ng r√µ'),
                        "reviews_context": reviews_context  # L∆∞u reviews_context v√†o session
                    }
                else:
                    # N·∫øu s·∫£n ph·∫©m ch∆∞a t·ªìn t·∫°i, scrape ƒë·∫ßy ƒë·ªß
                    progress_status.info(f"ƒêang scrape to√†n b·ªô th√¥ng tin s·∫£n ph·∫©m t·ª´: {product_url}")
                    
                    # G·ªçi h√†m scrape ƒë·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m ƒë·∫ßy ƒë·ªß
                    product_data = get_product_info(product_url)
                    
                    # L∆∞u d·ªØ li·ªáu v√†o session state ƒë·ªÉ s·ª≠ d·ª•ng sau
                    st.session_state.product_data = product_data
                    
                    # T·∫°o context t·ª´ reviews
                    reviews_context = "D∆∞·ªõi ƒë√¢y l√† c√°c ƒë√°nh gi√° c·ªßa ng∆∞·ªùi d√πng v·ªÅ s·∫£n ph·∫©m:\n\n"
                    for i, review in enumerate(product_data.get("reviews", [])):
                        reviews_context += f"Review #{i+1}:\n"
                        reviews_context += f"- Ti√™u ƒë·ªÅ: {review.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')}\n"
                        reviews_context += f"- Ng∆∞·ªùi ƒë√°nh gi√°: {review.get('author', '·∫®n danh')}\n"
                        reviews_context += f"- N·ªôi dung: {review.get('text', 'Kh√¥ng c√≥ n·ªôi dung')}\n"
                        reviews_context += f"- Ng√†y: {review.get('date', 'Kh√¥ng r√µ ng√†y')}\n\n"
                    
                    # L∆∞u reviews_context v√†o product_data ƒë·ªÉ d√πng sau n√†y
                    st.session_state.product_data["reviews_context"] = reviews_context
                
                # C·∫≠p nh·∫≠t progress bar
                progress_bar.progress(60)
                progress_status.info("ƒêang t·∫°o t√≥m t·∫Øt s·∫£n ph·∫©m...")
                
                # T·∫°o prompt ƒë·ªÉ sinh t√≥m t·∫Øt s·∫£n ph·∫©m
                summary_prompt = f"""
                H√£y t·∫°o m·ªôt b·∫£n t√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ s·∫£n ph·∫©m n√†y d·ª±a tr√™n th√¥ng tin sau:
                
                TH√îNG TIN C∆† B·∫¢N:
                T√™n s·∫£n ph·∫©m: {basic_product_info.get('title', 'Kh√¥ng r√µ')}
                Gi√°: {basic_product_info.get('price', 'Kh√¥ng r√µ')}
                ƒê√°nh gi√°: {basic_product_info.get('rating', 'Kh√¥ng r√µ')}
                S·ªë l∆∞·ª£ng ƒë√°nh gi√°: {basic_product_info.get('review_count', 'Kh√¥ng r√µ')}
                M√¥ t·∫£: {basic_product_info.get('description', 'Kh√¥ng r√µ')}
                
                T√≥m t·∫Øt n√™n bao g·ªìm: ƒê√¢y l√† s·∫£n ph·∫©m g√¨, c√°c t√≠nh nƒÉng ch√≠nh, ƒëi·ªÉm m·∫°nh, gi√° c·∫£, v√† c·∫£m nh·∫≠n chung c·ªßa ng∆∞·ªùi d√πng.
                """
                
                # G·ªçi OpenAI ƒë·ªÉ t·∫°o t√≥m t·∫Øt
                product_summary = get_openai_response(summary_prompt, selected_model=selected_model)
                
                # L∆∞u product_summary v√†o session_state
                st.session_state.product_summary = product_summary
                
                # C·∫≠p nh·∫≠t progress bar
                progress_bar.progress(80)
                progress_status.info("ƒêang chu·∫©n b·ªã th√¥ng tin cho chatbot...")
                
                # L·∫•y reviews_context t·ª´ session_state.product_data
                reviews_context = st.session_state.product_data.get("reviews_context", reviews_context)
                
                # C·∫≠p nh·∫≠t system message v·ªõi th√¥ng tin s·∫£n ph·∫©m
                system_message = f"""B·∫°n l√† tr·ª£ l√Ω AI h·ªØu √≠ch, th√¢n thi·ªán v√† trung th·ª±c.
                
                TH√îNG TIN S·∫¢N PH·∫®M {f"(ProductId: {product_id})" if product_id else ""}:
                T√™n: {basic_product_info.get('title', 'Kh√¥ng r√µ')}
                Gi√°: {basic_product_info.get('price', 'Kh√¥ng r√µ')}
                ƒê√°nh gi√°: {basic_product_info.get('rating', 'Kh√¥ng r√µ')}
                S·ªë l∆∞·ª£ng ƒë√°nh gi√°: {basic_product_info.get('review_count', 'Kh√¥ng r√µ')}
                M√¥ t·∫£: {basic_product_info.get('description', 'Kh√¥ng r√µ')}
                
                T√ìM T·∫ÆT S·∫¢N PH·∫®M:
                {product_summary}
                
                ƒê√ÅNH GI√Å NG∆Ø·ªúI D√ôNG:
                {reviews_context}
                
                H√£y s·ª≠ d·ª•ng th√¥ng tin tr√™n ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v·ªÅ s·∫£n ph·∫©m n√†y.
                Khi ƒë∆∞·ª£c h·ªèi v·ªÅ ƒë√°nh gi√° ho·∫∑c c·∫£m nh·∫≠n v·ªÅ s·∫£n ph·∫©m, h√£y d·ª±a v√†o c√°c ƒë√°nh gi√° c·ªßa ng∆∞·ªùi d√πng ƒë√£ cung c·∫•p.
                Khi kh√¥ng c√≥ th√¥ng tin ƒë·ªÉ tr·∫£ l·ªùi, h√£y th·ª´a nh·∫≠n r·∫±ng b·∫°n kh√¥ng c√≥ ƒë·ªß th√¥ng tin v√† kh√¥ng t·ª± t·∫°o ra th√¥ng tin gi·∫£.
                """
                
                # Reset to√†n b·ªô system message
                if "messages_history" in st.session_state:
                    for i, msg in enumerate(st.session_state.messages_history):
                        if msg.get("role") == "system":
                            st.session_state.messages_history[i] = {"role": "system", "content": system_message}
                            break
                    else:
                        # N·∫øu kh√¥ng t√¨m th·∫•y system message, th√™m v√†o ƒë·∫ßu danh s√°ch
                        st.session_state.messages_history.insert(0, {"role": "system", "content": system_message})
                else:
                    st.session_state.messages_history = [{"role": "system", "content": system_message}]
                
                # Reset conversation v√† th√™m tin nh·∫Øn t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng
                st.session_state.conversation = []
                st.session_state.conversation.append(("assistant", f"ƒê√£ t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m!\n\n**T√≥m t·∫Øt s·∫£n ph·∫©m:**\n\n{product_summary}"))
                
                # Hi·ªÉn th·ªã t√≥m t·∫Øt s·∫£n ph·∫©m ngay tr√™n m√†n h√¨nh v·ªõi giao di·ªán ƒë·∫πp
                summary_container = st.container()
                with summary_container:
                    col1, col2 = st.columns([0.05, 0.95])
                    with col1:
                        st.markdown("‚úÖ")
                    with col2:
                        st.success("ƒê√£ t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m!")
                    
                    st.markdown("""
                    <div style='margin: 10px; display: flex; align-items: flex-start;'>
                        <div style='width: 36px; height: 36px; border-radius: 50%; background-color: #4285F4; color: white; display: flex; justify-content: center; align-items: center; margin-right: 8px; font-weight: bold;'>
                            <span>ü§ñ</span>
                        </div>
                        <div style='display: inline-block; background-color: #F1F0F0; padding: 8px 12px; border-radius: 8px; max-width: 90%;'>
                            {summary}
                        </div>
                    </div>
                    """.format(summary=product_summary.replace('\n', '<br>')), unsafe_allow_html=True)
                    
                
                # Ho√†n th√†nh progress bar
                progress_bar.progress(100)
                progress_status.success("Ho√†n t·∫•t!")
                time.sleep(0.5)  # Cho ng∆∞·ªùi d√πng th·∫•y th√¥ng b√°o ho√†n t·∫•t
                
                # X√≥a c√°c th√†nh ph·∫ßn hi·ªÉn th·ªã progress
                progress_bar.empty()
                progress_status.empty()
            
            # Bu·ªôc Streamlit rerun ƒë·ªÉ hi·ªÉn th·ªã thay ƒë·ªïi
            st.rerun()

    # ------------------------------------------------
    # Ph·∫ßn ch√≠nh: giao di·ªán chat
    # ------------------------------------------------

    st.title("Amazon Chatbot")

    # Kh·ªüi t·∫°o session_state ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠ h·ªôi tho·∫°i
    if "conversation" not in st.session_state:
        st.session_state.conversation = []
    
    # Kh·ªüi t·∫°o messages_history cho API
    if "messages_history" not in st.session_state:
        st.session_state.messages_history = [
            {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω AI h·ªØu √≠ch, th√¢n thi·ªán v√† trung th·ª±c."}
        ]

    # H√†m hi·ªÉn th·ªã m·ªôt tin nh·∫Øn trong khu v·ª±c chat
    # role: 'user' ho·∫∑c 'assistant'
    # text: n·ªôi dung tin nh·∫Øn
    def display_message(role, text):
        # Ng∆∞·ªùi d√πng (hi·ªÉn th·ªã b√™n ph·∫£i, 70% ƒë·ªô r·ªông)
        if role == "user":
            st.markdown(
                f"""
                <div style='text-align: right; margin: 10px; display: flex; justify-content: flex-end; align-items: flex-start;'>
                    <div style='display: inline-block; background-color: #DCF8C6; padding: 8px 12px; border-radius: 8px; max-width: 70%; margin-right: 8px;'>
                        {text}
                    </div>
                    <div style='width: 36px; height: 36px; border-radius: 50%; background-color: #128C7E; color: white; display: flex; justify-content: center; align-items: center; font-weight: bold;'>
                        <span>üë§</span>
                    </div>
                </div>
                """,
                unsafe_allow_html=True
            )
        # Bot (hi·ªÉn th·ªã 100% ƒë·ªô r·ªông, b√™n d∆∞·ªõi c√¢u h·ªèi)
        else:
            st.markdown(
                f"""
                <div style='margin: 10px; display: flex; align-items: flex-start;'>
                    <div style='width: 36px; height: 36px; border-radius: 50%; background-color: #4285F4; color: white; display: flex; justify-content: center; align-items: center; margin-right: 8px; font-weight: bold;'>
                        <span>ü§ñ</span>
                    </div>
                    <div style='display: inline-block; background-color: #F1F0F0; padding: 8px 12px; border-radius: 8px; max-width: 90%;'>
                        {text}
                    </div>
                </div>
                """,
                unsafe_allow_html=True
            )

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ c√°c tin nh·∫Øn
    for role, content in st.session_state.conversation:
        display_message(role, content)

    # Input c·ªßa chat
    user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...")

    # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ·∫•n Enter
    if user_input:
        # Th√™m tin nh·∫Øn c·ªßa user v√†o h·ªôi tho·∫°i hi·ªÉn th·ªã UI
        st.session_state.conversation.append(("user", user_input))
        
        # Th√™m tin nh·∫Øn user v√†o history cho API
        st.session_state.messages_history.append({"role": "user", "content": user_input})
        
        # Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng ngay l·∫≠p t·ª©c
        display_message("user", user_input)
        
        # T·∫°o placeholder ƒë·ªÉ hi·ªÉn th·ªã tin nh·∫Øn ƒëang typing
        typing_placeholder = st.empty()
        typing_placeholder.markdown(
            """
            <div style='margin: 10px; display: flex; align-items: flex-start;'>
                <div style='width: 36px; height: 36px; border-radius: 50%; background-color: #4285F4; color: white; display: flex; justify-content: center; align-items: center; margin-right: 8px; font-weight: bold;'>
                    <span>ü§ñ</span>
                </div>
                <div style='display: inline-block; background-color: #F1F0F0; padding: 8px 12px; border-radius: 8px;'>
                    <i>ƒêang nh·∫≠p...</i>
                </div>
            </div>
            """,
            unsafe_allow_html=True
        )
        
        try:
            # G·ªçi OpenAI API v√† hi·ªÉn th·ªã k·∫øt qu·∫£ streaming v·ªõi to√†n b·ªô l·ªãch s·ª≠
            full_response = ""
            product_id = st.session_state.product_id if st.session_state.use_file_search else None
            use_file_search = st.session_state.use_file_search
            
            for response_chunk in get_openai_streaming_response(
                st.session_state.messages_history, 
                product_id=product_id,
                use_file_search=use_file_search,
                selected_model=selected_model
            ):
                if response_chunk:
                    full_response += response_chunk
                    # C·∫≠p nh·∫≠t ph·∫£n h·ªìi ƒëang x√¢y d·ª±ng
                    typing_placeholder.markdown(
                        f"""
                        <div style='margin: 10px; display: flex; align-items: flex-start;'>
                            <div style='width: 36px; height: 36px; border-radius: 50%; background-color: #4285F4; color: white; display: flex; justify-content: center; align-items: center; margin-right: 8px; font-weight: bold;'>
                                <span>ü§ñ</span>
                            </div>
                            <div style='display: inline-block; background-color: #F1F0F0; padding: 8px 12px; border-radius: 8px; max-width: 90%;'>
                                {full_response}‚ñå
                            </div>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
            
            # X√≥a placeholder typing v√† th√™m tin nh·∫Øn ho√†n ch·ªânh v√†o h·ªôi tho·∫°i UI
            typing_placeholder.empty()
            st.session_state.conversation.append(("assistant", full_response))
            
            # Th√™m ph·∫£n h·ªìi c·ªßa bot v√†o history cho OpenAI API
            st.session_state.messages_history.append({"role": "assistant", "content": full_response})
            
        except Exception as e:
            # X·ª≠ l√Ω l·ªói n·∫øu c√≥
            error_message = f"C√≥ l·ªói x·∫£y ra: {str(e)}"
            typing_placeholder.empty()
            st.session_state.conversation.append(("assistant", error_message))
            display_message("assistant", error_message)

        # Reset √¥ input v·ªÅ r·ªóng ƒë·ªÉ s·∫µn s√†ng cho c√¢u h·ªèi ti·∫øp theo
        st.rerun()

if __name__ == "__main__":
    main()